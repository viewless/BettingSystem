// <auto-generated />
using System;
using BettingSystem.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingSystem.DataAccess.Migrations
{
    [DbContext(typeof(BettingSystemContext))]
    partial class BettingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.BetEntity", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchEntityMatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BetId");

                    b.HasIndex("MatchEntityMatchId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.EventEntity", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SportEntitySportId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("SportEntitySportId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.MatchEntity", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventEntityEventId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchId");

                    b.HasIndex("EventEntityEventId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.OddEntity", b =>
                {
                    b.Property<int>("OddId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BetEntityBetId")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SpecialBetValue")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("OddId");

                    b.HasIndex("BetEntityBetId");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.SportEntity", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("SportEntity");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.XmlSportsEntity", b =>
                {
                    b.Property<int>("XmlSportsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.HasKey("XmlSportsId");

                    b.HasIndex("SportId");

                    b.ToTable("XmlSports");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.BetEntity", b =>
                {
                    b.HasOne("BettingSystem.DataAccess.Entities.MatchEntity", null)
                        .WithMany("Bets")
                        .HasForeignKey("MatchEntityMatchId");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.EventEntity", b =>
                {
                    b.HasOne("BettingSystem.DataAccess.Entities.SportEntity", null)
                        .WithMany("Events")
                        .HasForeignKey("SportEntitySportId");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.MatchEntity", b =>
                {
                    b.HasOne("BettingSystem.DataAccess.Entities.EventEntity", null)
                        .WithMany("Matches")
                        .HasForeignKey("EventEntityEventId");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.OddEntity", b =>
                {
                    b.HasOne("BettingSystem.DataAccess.Entities.BetEntity", null)
                        .WithMany("Odds")
                        .HasForeignKey("BetEntityBetId");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.XmlSportsEntity", b =>
                {
                    b.HasOne("BettingSystem.DataAccess.Entities.SportEntity", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.BetEntity", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.EventEntity", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.MatchEntity", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("BettingSystem.DataAccess.Entities.SportEntity", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
